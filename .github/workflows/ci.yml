name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.11', '3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ffmpeg (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install ffmpeg (macOS)
      if: runner.os == 'macOS'
      run: brew install ffmpeg

    - name: Install ffmpeg (Windows)
      if: runner.os == 'Windows'
      run: choco install ffmpeg -y

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests
      run: |
        pytest tests/ -v --cov=src/dlzoom --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  lint:
    name: Lint and Type Check
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run ruff
      run: |
        ruff check src/ tests/

    - name: Run black
      run: |
        black --check src/ tests/

    - name: Run mypy
      run: |
        mypy src/dlzoom/ --ignore-missing-imports --no-error-summary
      continue-on-error: true  # Don't fail on type errors for now

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # For uploading SARIF results

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run pip-audit (Python dependency vulnerabilities)
      run: |
        pip install pip-audit
        pip-audit --format json --output pip-audit-results.json || true

    - name: Run Trivy scanner on filesystem (Python dependencies)
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-fs-results.sarif'

    - name: Upload Trivy filesystem results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-fs-results.sarif'
        category: 'python-dependencies'

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
    - uses: actions/checkout@v4

    - name: Build Docker image
      run: docker build -t dlzoom:test .

    - name: Run Trivy scanner on Docker image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dlzoom:test'
        format: 'sarif'
        output: 'trivy-docker-results.sarif'

    - name: Upload Trivy Docker results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-docker-results.sarif'
        category: 'docker-image'

    - name: Run Trivy scanner (table format for PR comments)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dlzoom:test'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
