name: Release

on:
  push:
    branches: [main]
    tags: ['v*']
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    name: Build Python Package
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools-scm

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package metadata
      run: twine check dist/*

    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  test-package:
    name: Test Built Package
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install ffmpeg (required by dlzoom)
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg

    - name: Install wheel
      run: python -m pip install dist/*.whl

    - name: Test import and version
      run: |
        python -c "import dlzoom; print(f'dlzoom version: {dlzoom.__version__}')"

    - name: Test CLI availability
      run: |
        dlzoom --version
        dlzoom --help

  publish-testpypi:
    name: Publish to Test PyPI
    needs: test-package
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true

  publish-pypi:
    name: Publish to PyPI
    needs: test-package
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'release'
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Download distributions
      uses: actions/download-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

  docker-build-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write  # For uploading SARIF results
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build test image
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: dlzoom:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image functionality
      run: |
        # Test help command
        docker run --rm dlzoom:test --help

        # Test version command
        docker run --rm dlzoom:test --version

        # Test that ffmpeg is available
        docker run --rm --entrypoint sh dlzoom:test -c "which ffmpeg"

    - name: Check image size
      id: size
      run: |
        SIZE=$(docker image inspect dlzoom:test --format='{{.Size}}')
        SIZE_MB=$((SIZE / 1024 / 1024))
        echo "Image size: ${SIZE_MB}MB"
        echo "size_mb=${SIZE_MB}" >> $GITHUB_OUTPUT

        # Warn if image is too large (> 500MB)
        if [ $SIZE_MB -gt 500 ]; then
          echo "::warning::Docker image is large: ${SIZE_MB}MB"
        fi

    - name: Run Trivy security scanner
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: 'dlzoom:test'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Check if SARIF file exists
      id: check-sarif
      run: |
        if [ -f "trivy-results.sarif" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Upload Trivy results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: steps.check-sarif.outputs.exists == 'true'
      continue-on-error: true
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Trivy scanner (fail on high/critical)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'dlzoom:test'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

  docker-publish:
    name: Publish Docker Image
    needs: docker-build-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write  # For GitHub Container Registry

    steps:
    - uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          yanivgolan1/dlzoom
          ghcr.io/yaniv-golan/dlzoom
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false  # Avoid manifest issues

  github-release-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: publish-pypi
    if: github.event_name == 'release'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build

    - name: Build package
      run: python -m build

    - name: Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/*.whl
        asset_name: dlzoom-${{ github.event.release.tag_name }}-py3-none-any.whl
        asset_content_type: application/zip

    - name: Upload tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dist/*.tar.gz
        asset_name: dlzoom-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip
